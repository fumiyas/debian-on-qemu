#!/bin/sh
##
## Linux initramfs: Simple /init script
## Copyright (c) 2012 SATOH Fumiyasu @ OSS Technology Corp., Japan
##
## License: GNU General Public License version 3
##

set -u
set -e
umask 0022

PS4="initramfs:$0:"
info=": INFO ::"
error=": ERROR ::"
warning=": WARNING ::"

trap '$error"Fallback to /bin/sh"; exec /bin/sh' EXIT
set -x

$info"Start"

root=""
rootdelay=""
init="/sbin/init"
modules="ext4"

$info"Creating basic directory tree in initramfs ..."
mkdir -p /root
mkdir -p /dev
mkdir -p /sys
mkdir -p /proc
mkdir -p /tmp
mkdir -p /mnt

$info"Mounting pseudo filesystems ..."
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc

if ! mount -t devtmpfs -o size=10M,mode=0755 udev /dev; then
  $warning"devtmpfs not available, falling back to tmpfs for /dev"
  mount -t tmpfs -o size=10M,mode=0755 udev /dev
  [ -e /dev/console ] || mknod -m 0600 /dev/console c 5 1
  [ -e /dev/null ] || mknod /dev/null c 1 3
fi
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

$info"Parsing command-line argument ..."
for argv in $(cat /proc/cmdline); do
  case "$argv" in
  modules=*)
    modules="${argv#modules=}"
    ;;
  root=*)
    root="${argv#root=}"
    ;;
  rootdelay=*)
    rootdelay="${argv#rootdelay=}"
    case "$rootdelay" in
    *[![:digit:].]*)
      rootdelay=
      ;;
    esac
    ;;
  init=*)
    init="${argv#init=}"
    ;;
  esac
done

$info"Loading kernel modules ..."
for module in ${modules//,/ }; do
  modprobe "$module" || true
done

if [ -n "$rootdelay" ]; then
  sleep "$rootdelay"
fi

if [ -n "$root" ] && [ -z "${root##0x*}" ]; then
  root_major=$(($root / 256))
  root_minor=$(($root % 256))

  $info"Creating root device (major=$root_major, minor=$root_minor) ..."
  mknod /dev/root b "$root_major" "$root_minor"
  root="/dev/root"
fi

if [ -n "$root" ]; then
  $info"Mounting $root ..."
  mount -o ro "$root" /root

  if [ ! -x /root"$init" ]; then
    $error"$init not found in $root"
    exit 1
  fi

  $info"Switching root filesystem to $root and exec $init ..."
  mount -n -o move /sys /root/sys
  mount -n -o move /proc /root/proc
  mount -n -o move /dev /root/dev
  exec switch_root /root "$init"
fi

$warning"No root filesystem device specified"
exit 1

